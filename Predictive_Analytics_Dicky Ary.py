# -*- coding: utf-8 -*-
"""Salinan Copy of [Klasifikasi] Submission Akhir BMLP_Your Name.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12HDguFAgqnMQ5L-VfqQ2T-W_tEHOZYIY

# Proyek Klasifikasi


- **Nama:** Dicky Ary Setiawan
- **Email:** DickyAry54@gmail.com
- **ID Dicoding:** ruhe54

# **1. Import Library**

Pada tahap ini, Anda perlu mengimpor beberapa pustaka (library) Python yang dibutuhkan untuk analisis data dan pembangunan model machine learning.
"""

#Type your code here
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler, MinMaxScaler
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn import preprocessing
from sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score, f1_score
from sklearn.naive_bayes import GaussianNB
from sklearn.decomposition import PCA

from google.colab import drive
drive.mount('/content/drive')

"""# **2. Memuat Dataset dari Hasil Clustering**

Memuat dataset hasil clustering dari file CSV ke dalam variabel DataFrame.
"""

#Type your code here
df= pd.read_csv('dataset/book_labeling.csv')
df.head()

"""melihat statistik deskriptif dari dataframe"""

df.describe()

"""Melihat informasi dataframe antara lain column dan datatype"""

df.info()

"""Melihat buku dengan jumlah halaman paling banyak"""

df[df.num_pages == 6576]

"""Melihat apakah terdapat rating_count dengan nilai 0"""

df[df.ratings_count	== 0].count()

"""Melakukan drop pada rating_count dengan nilai 0"""

df = df.drop(df[df.ratings_count == 0].index)
df.head()

df[df.ratings_count == 0]

"""Mengetahui apakah terdapat nilai NA pada dataframe"""

df.isna().sum()

"""Melakukan plot dengan nilai X=rating dan Y=jumlah buku"""

rating_5 = df.average_rating[(df.average_rating == 5)]
rating_4 = df.average_rating[(df.average_rating >= 4) & (df.average_rating < 5)]
rating_3 = df.average_rating[(df.average_rating >= 3) & (df.average_rating < 4)]
rating_2 = df.average_rating[(df.average_rating >= 2) & (df.average_rating < 3)]
rating_1 = df.average_rating[(df.average_rating >= 1) & (df.average_rating < 2)]

x = ["5", "4", "3", "2", "1"]
y = [len(rating_5.values), len(rating_4.values), len(rating_3.values), len(rating_2.values), len(rating_1.values)]

# Membuat bar chart untuk distribusi usia pelanggan
plt.figure(figsize=(15, 6))
plt.bar(x, y, color=['red', 'green', 'blue', 'cyan', 'yellow'])
plt.title("average_rating")
plt.xlabel("Rating")
plt.ylabel("Number of Book")

# Menambahkan label jumlah pelanggan di atas setiap bar
for i in range(len(x)):
  plt.text(i, y[i], y[i], ha='center', va='bottom')

plt.show()

"""Membuat plot persebaran data antara rating_count dan average rating"""

plt.figure(figsize=(15, 6))
plt.scatter(df.average_rating,df.ratings_count)
plt.title("rating vs count")
plt.xlabel("Average Rating")
plt.ylabel("Rating Count")
plt.show()

"""membuat plot heatmap untuk menggambarkan secara visual korelasi antara beberapa variabel numerik dalam suatu kumpulan data dengan menampilkannya sebagai kotak berkode warna"""

num_features = df.select_dtypes(include=[np.number])

plt.figure(figsize=(12,10))
corr_matrix = num_features.corr()
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm')
plt.title('Heatmap Korelasi')
plt.show()

"""Insight yang didapatkan:
1. penyebaran rating paling tinggi berada pada rating 3 dan paling rendah terdapat pada rating 5.
2. Buku dengan rating rata-rata rendah (di bawah 3.0) memiliki jumlah rating yang sangat sedikit. Ini menunjukkan bahwa buku-buku dengan kualitas yang dirasakan buruk cenderung mendapatkan perhatian yang lebih sedikit dari pembaca.
3. Sebagian besar data terlihat terkonsentrasi di area rating rata-rata antara 3.5 hingga 4.5, dengan jumlah rating yang rendah hingga sedang.
4. label,text_reviews_count ,dan rating_count memiliki hubungan yang sangat dekat.

# **3. Data Splitting**

Tahap Data Splitting bertujuan untuk memisahkan dataset menjadi dua bagian: data latih (training set) dan data uji (test set).
"""

df2 = df.drop(columns=['bookID','title','authors','language_code','publication_date'])
df2.head()

scaler = MinMaxScaler()
numeric_columns = df2.select_dtypes(include=['int64', 'float64']).columns
df2[numeric_columns] = scaler.fit_transform(df2[numeric_columns])

X = df2.drop(columns=['label'])
z = df2['label']
lab_enc = preprocessing.LabelEncoder()
y = lab_enc.fit_transform(z)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
print(f"Training set shape: X_train={X_train.shape}, y_train={y_train.shape}")
print(f"Test set shape: X_test={X_test.shape}, y_test={y_test.shape}")

"""# **4. Membangun Model Klasifikasi**

## **a. Membangun Model Klasifikasi**

Setelah memilih algoritma klasifikasi yang sesuai, langkah selanjutnya adalah melatih model menggunakan data latih.

Berikut adalah rekomendasi tahapannya.
1. Pilih algoritma klasifikasi yang sesuai, seperti Logistic Regression, Decision Tree, Random Forest, atau K-Nearest Neighbors (KNN).
2. Latih model menggunakan data latih.
"""

#Type your code here
knn = KNeighborsClassifier().fit(X_train, y_train)
svm = SVC().fit(X_train, y_train)

"""Tulis narasi atau penjelasan algoritma yang Anda gunakan.

## **b. Evaluasi Model Klasifikasi**

Berikut adalah **rekomendasi** tahapannya.
1. Lakukan prediksi menggunakan data uji.
2. Hitung metrik evaluasi seperti Accuracy dan F1-Score (Opsional: Precision dan Recall).
3. Buat confusion matrix untuk melihat detail prediksi benar dan salah.
"""

# K-Nearest Neighbors (KNN)
y_pred_knn = knn.predict(X_test)
cm_knn = confusion_matrix(y_test, y_pred_knn)
tn = cm_knn.ravel()
fp = cm_knn.ravel()
fn = cm_knn.ravel()
tp = cm_knn.ravel()
print("==== KNN Classifier ====")
print("Confusion Matrix:")
print(cm_knn)
print(f"True Positive (TP): {tp}")
print(f"False Positive (FP): {fp}")
print(f"False Negative (FN): {fn}")
print(f"True Negative (TN): {tn}")
print(f"Accuracy: {accuracy_score(y_test, y_pred_knn):.4f}")
print(f"Precision: {precision_score(y_test, y_pred_knn,average='micro'):.4f}")
print(f"Recall: {recall_score(y_test, y_pred_knn,average='micro'):.4f}")
print(f"F1-Score: {f1_score(y_test, y_pred_knn,average='micro')}")
print("\n" + "-"*40 + "\n")

plt.figure(figsize=(5, 4))
sns.heatmap(cm_knn, annot=True, fmt='d', cmap='Blues', cbar=False)
plt.title('KNN Confusion Matrix')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.show()

# Support Vector Machine (SVM)
y_pred_svm = svm.predict(X_test)
cm_svm = confusion_matrix(y_test, y_pred_svm)
tn = cm_svm.ravel()
fp = cm_svm.ravel()
fn = cm_svm.ravel()
tp = cm_svm.ravel()
print("==== SVM Classifier ====")
print("Confusion Matrix:")
print(cm_svm)
print(f"True Positive (TP): {tp}")
print(f"False Positive (FP): {fp}")
print(f"False Negative (FN): {fn}")
print(f"True Negative (TN): {tn}")
print(f"Accuracy: {accuracy_score(y_test, y_pred_svm):.4f}")
print(f"Precision: {precision_score(y_test, y_pred_svm,average='micro'):.4f}")
print(f"Recall: {recall_score(y_test, y_pred_svm,average='micro'):.4f}")
print(f"F1-Score: {f1_score(y_test, y_pred_svm,average='micro'):.4f}")
print("\n" + "-"*40 + "\n")

plt.figure(figsize=(5, 4))
sns.heatmap(cm_svm, annot=True, fmt='d', cmap='Blues', cbar=False)
plt.title('SVM Confusion Matrix')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.show()

"""Tulis hasil evaluasi algoritma yang digunakan, jika Anda menggunakan 2 algoritma, maka bandingkan hasilnya.

## **c. Analisis Hasil Evaluasi Model Klasifikasi**

Berikut adalah **rekomendasi** tahapannya.
1. Bandingkan hasil evaluasi sebelum dan setelah tuning (jika dilakukan).
2. Identifikasi kelemahan model, seperti:
  - Precision atau Recall rendah untuk kelas tertentu.
  - Apakah model mengalami overfitting atau underfitting?
3. Berikan rekomendasi tindakan lanjutan, seperti mengumpulkan data tambahan atau mencoba algoritma lain jika hasil belum memuaskan.

**Evaluasi**

1. **K-Nearest Neighbors (KNN)**
   - **Accuracy**: 99.50%
   - **Precision**: 99.50%
   - **Recall**: 99.50%
   - **F1-Score**: 99.50%

   **Analisis**: dalam methode KNN ini memiliki nilai accurasy,precision,recall,dan F1 sangat memuaskan karena nilai yang didapatka mencapai nilai 99.50% yang dimana muncul error akan sangat kecil dan dari kedua methode yang digunakan methode ini adalah methode dengan nilai accurasy,precision,recall,dan F1 yang paling baik meskipun hanya terpaut 0.19% saja.

2. **Support Vector Machine (SVM)**
   - **Accuracy**: 99.31%
   - **Precision**: 99.31%
   - **Recall**: 99.31%
   - **F1-Score**: 99.31%

   **Analisis**: metode SVM yang digunakan menunjukkan nilai yang hampir mirip dengan KNN dimana nilai accurasy,precision,recall,dan F1 yang didapatkan adalah 99.31% nilai ini sudah sangat baik dan hampir menyentuh nilai 100% tetapi nilai yang didapatkan lebih rendah dari KNN.

1.Apakah buku dengan jumlah halaman yang lebih banyak cenderung mendapatkan rating lebih tinggi atau lebih rendah?

2.Bagaimana distribusi rating untuk semua buku? Apakah ada pola tertentu?

3.Apakah buku yang ditulis oleh penulis yang sama cenderung memiliki rating yang mirip?

**1.Apakah buku dengan jumlah halaman yang lebih banyak cenderung mendapatkan rating lebih tinggi atau lebih rendah?**

membuat variable dengan df.num_pages lebih dari 1000
"""

num_pagedf = df[df.num_pages >= 1000]
num_pagedf.head()

num_pagedf.sort_values(by='average_rating', ascending=False)

"""membuat plot dengan average_rating dan jumlah halaman dengan menggunakan dataframe yang berisi buku dengan halaman diatas 1000."""

plt.figure(figsize=(15, 6))
plt.scatter(num_pagedf.average_rating,num_pagedf.num_pages)
plt.xlim(left=0)
plt.show()

"""2.bagaimana distribusi rating untuk semua buku? Apakah ada pola tertentu?

membuat boxplot dengan nilai x= label dan y=rating_count
"""

plt.figure(figsize=(10, 6))
sns.boxplot(x='label', y='ratings_count', data=df)
plt.title('Distribusi  Berdasarkan Rating_count')
plt.ylim(0, 5000000)
plt.show()

df[df.label == 2].sort_values(by='ratings_count', ascending=False)

"""dilanjutkan dengan membuat boxplot dengan nilai x=label dan y=average_rating"""

plt.figure(figsize=(10, 6))
sns.boxplot(x='label', y='average_rating', data=df)
plt.title('Distribusi  Berdasarkan rating')
plt.show()

"""3.Apakah buku yang ditulis oleh penulis yang sama cenderung memiliki rating yang mirip?

membuat variable yang berisi buku dengan author J.K.Rowling
"""

Rowling_df = df[df.authors == 'J.K. Rowling']
Rowling_df.head()

"""Membuat scaterplot untuk melihat penyebaran data average_rating dan num_page dengan menggunakan dataframe buku dengan author J.K.Rowling"""

plt.figure(figsize=(15, 6))
plt.scatter(Rowling_df.average_rating,Rowling_df.num_pages)
plt.xlim(left=0)
plt.show()

"""membuat variable yang berisi buku dengan author Agatha Christie"""

Agatha_df = df[df.authors == 'Agatha Christie']
Agatha_df.head()

"""Membuat scaterplot untuk melihat penyebaran data average_rating dan num_page dengan menggunakan dataframe buku dengan author Agatha Christie"""

plt.figure(figsize=(15, 6))
plt.scatter(Agatha_df.average_rating,Agatha_df.num_pages)
plt.xlim(left=0)
plt.show()

"""Jawaban Pertanyaan

1.Apakah buku dengan jumlah halaman yang lebih banyak cenderung mendapatkan rating lebih tinggi atau lebih rendah?

Jawaban : Sangat mengejutkan bahwa buku dengan halaman lebih dari 1000 lembar memiliki rating yang sangat tinggi. bahkan rating terendah adalah 'Billy Budd Sailor and Other Uncompleted Writings' yang ditulis oleh 'Herman Melville' dengan 1016 halaman dan yang tertinggi adalah 'The Complete Calvin and Hobbes' yang ditulis 'Bill Watterson' dengan 1456 halaman

2.bagaimana distribusi rating untuk semua buku? Apakah ada pola tertentu?

dari data diatas dapat dilihat bahwa distribusi rating yang didapatkan sangat merata , tetapi terdapat pola dimana label 0 memiliki rating count yang terendah yaitu dibawah 250ribu reviewer, label 1 12-25 juta reviewer , label 250ribu - 12 juta reviewer ,dan label 3 lebih dari 25 juta reviewer

3.Apakah buku yang ditulis oleh penulis yang sama cenderung memiliki rating yang mirip?

dari data diatas diambil dua pengarang terkenal yang menulis buku sendirian yaitu J.K Rowling dengan buku terkenalnya harry potter dan Agatha Cristhie yang dijuluki sebagai ratu misteri, dari data diatas memang betul bahwa buku yang ditulis oleh penulis yang sama cenderung memiliki rating yang tidak jauh berbeda antara satu dengan lainnya
"""
